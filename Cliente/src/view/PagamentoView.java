/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import javax.swing.JOptionPane;
import model.CargoModel;
import model.DepartamentoModel;
import model.FuncionarioModel;
import model.PagamentoModel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

/**
 *
 * @author Yasmim Mendes
 */
import controller.CargoInterface;
import controller.DepartamentoInterface;
import controller.FuncionarioInterface;
import controller.PagamentoInterface;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
public class PagamentoView extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(PagamentoView.class.getName());

    /**
     * Creates new form PagamentoView
     */
    public PagamentoView() {
        initComponents();inicializa();
        preencherComboBox();
        preencherTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtxValor = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jbSalvar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbFechar = new javax.swing.JButton();
        jbPesquisar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jtxId_Pagamento = new javax.swing.JTextField();
        jbNovo = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jcbFuncionario = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setVisible(true);

        jLabel1.setText("PAGAMENTO");

        jLabel2.setText("Valor:");

        jtxValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxValorActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Funcionário", "Valor"
            }
        ));
        jScrollPane1.setViewportView(jTable);

        jbSalvar.setText("Salvar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbEditar.setText("Editar");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbFechar.setText("Fechar");
        jbFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFecharActionPerformed(evt);
            }
        });

        jbPesquisar.setText("Pesquisar");
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });

        jLabel5.setText("Código:");

        jtxId_Pagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxId_PagamentoActionPerformed(evt);
            }
        });

        jbNovo.setText("Novo");
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });

        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jLabel3.setText("Funcionário:");

        jcbFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFuncionarioActionPerformed(evt);
            }
        });
        jcbFuncionario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jcbFuncionarioPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(jbNovo)
                        .addGap(18, 18, 18)
                        .addComponent(jbSalvar)
                        .addGap(18, 18, 18)
                        .addComponent(jbEditar)
                        .addGap(18, 18, 18)
                        .addComponent(jbExcluir)
                        .addGap(18, 18, 18)
                        .addComponent(jbFechar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtxValor, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(5, 5, 5)
                                    .addComponent(jcbFuncionario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jtxId_Pagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(jbPesquisar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jLabel1)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtxId_Pagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcbFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbFechar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbEditar)
                        .addComponent(jbSalvar)
                        .addComponent(jbNovo)
                        .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtxValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxValorActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        //recebe o funcionário selecionado e o valor digitado
        FuncionarioModel funcionarioSelecionado = (FuncionarioModel) jcbFuncionario.getSelectedItem();
        String valorTexto = jtxValor.getText();

        //impede salvar se algum campo estiver vazio
        if (funcionarioSelecionado == null || valorTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            //converte o valor digitado para float
            float valor = Float.parseFloat(valorTexto);

            //cria o objeto Pagamento e define os dados
            PagamentoModel pagamento = new PagamentoModel();
            pagamento.setId_cliente(funcionarioSelecionado.getId_funcionario());
            pagamento.setValor_liquido(valor);

            //envia o pagamento para o servidor via RMI
            if (pagamentoController.registrarPagamento(pagamento)) {
                JOptionPane.showMessageDialog(this, "Pagamento registrado com sucesso!");
                limparCampos();
                preencherTabela();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao registrar pagamento!", "Erro no Banco", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        //verifica se tem um pagamento selecionado
        if (jtxId_Pagamento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecione ou pesquise um pagamento primeiro!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            //lê os dados do formulário
            int idPagamento = Integer.parseInt(jtxId_Pagamento.getText());
            FuncionarioModel funcionarioSelecionado = (FuncionarioModel) jcbFuncionario.getSelectedItem();
            String valorTexto = jtxValor.getText();

            //validação dos campos obrigatórios
            if (funcionarioSelecionado == null || valorTexto.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //converte o valor digitado
            float valorLiquido;
            try {
                valorLiquido = Float.parseFloat(valorTexto);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Valor inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //cria o objeto de pagamento atualizado
            PagamentoModel pagamento = new PagamentoModel();
            pagamento.setId_pagamento(idPagamento);
            pagamento.setId_cliente(funcionarioSelecionado.getId_funcionario());
            pagamento.setValor_liquido(valorLiquido);

            //chama método remoto pra atualizar o pagamento
            if (pagamentoController.editarPagamento(pagamento)) {
                JOptionPane.showMessageDialog(this, "Pagamento atualizado com sucesso!");
                limparCampos();
                preencherTabela();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar pagamento!", "Erro no Banco", JOptionPane.ERROR_MESSAGE);
            }

        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID do pagamento inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFecharActionPerformed
        dispose();
    }//GEN-LAST:event_jbFecharActionPerformed

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        //verifica se o campo ID foi preenchido
        if (jtxId_Pagamento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha o código do pagamento!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            //lê o ID digitado e cria um objeto para busca
            int idPagamento = Integer.parseInt(jtxId_Pagamento.getText());
            PagamentoModel pagamentoBusca = new PagamentoModel();
            pagamentoBusca.setId_pagamento(idPagamento);

            //consulta via RMI para buscar o pagamento
            PagamentoModel pagamento = pagamentoController.consultaPagamento(pagamentoBusca);

            if (pagamento != null) {
                //preenche campos do formulário
                jtxValor.setText(String.valueOf(pagamento.getValor_liquido()));

                //seleciona funcionário correspondente no combobox
                for (int i = 0; i < jcbFuncionario.getItemCount(); i++) {
                    FuncionarioModel f = jcbFuncionario.getItemAt(i);
                    if (f.getId_funcionario() == pagamento.getId_cliente()) {
                        jcbFuncionario.setSelectedIndex(i);
                        break;
                    }
                }

                //atualiza o estado dos botões e campos
                jbSalvar.setEnabled(false);
                jbEditar.setEnabled(true);
                jbExcluir.setEnabled(true);

                jtxId_Pagamento.setEditable(false);
                jtxValor.setEditable(true);
                jcbFuncionario.setEnabled(true);

            } else {
                JOptionPane.showMessageDialog(this, "Pagamento não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Código inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jtxId_PagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxId_PagamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxId_PagamentoActionPerformed

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        //define o estado dos botões quando começa novo cadastro
        jbPesquisar.setEnabled(false);
        jbNovo.setEnabled(false);
        jbEditar.setEnabled(false);
        jbExcluir.setEnabled(false);
        jbSalvar.setEnabled(true);

        //habilita os campos pra inserir novo pagamento (ID é gerado automaticamente)
        jtxId_Pagamento.setEditable(false);
        jtxValor.setEditable(true);
        jcbFuncionario.setEnabled(true);

        //limpa campos do formulário
        jtxId_Pagamento.setText("");
        jtxValor.setText("");
        jcbFuncionario.setSelectedIndex(-1);

        //coloca foco no campo valor
        jtxValor.requestFocus();
    }//GEN-LAST:event_jbNovoActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        //verifica se o campo ID foi preenchido
        if (jtxId_Pagamento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Digite o código do pagamento!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int idPagamento = Integer.parseInt(jtxId_Pagamento.getText());

            //confirma a exclusão com o usuário
            int confirm = JOptionPane.showConfirmDialog(
                this,
                "Deseja realmente excluir este pagamento?",
                "Confirmar Exclusão",
                JOptionPane.YES_NO_OPTION
            );

            if (confirm != JOptionPane.YES_OPTION) {
                return;
            }

            //cria o objeto e define o ID do pagamento que vai ser removido
            PagamentoModel pagamento = new PagamentoModel();
            pagamento.setId_pagamento(idPagamento);

            //consulta via RMI para excluir o pagamento
            if (pagamentoController.excluirPagamento(pagamento)) {
                JOptionPane.showMessageDialog(this, "Pagamento excluído com sucesso!");
                limparCampos();
                preencherTabela();

                //atualizar estado dos botões e campos
                jbSalvar.setEnabled(true);
                jbEditar.setEnabled(false);
                jbExcluir.setEnabled(false);
                jbPesquisar.setEnabled(true);
                jbNovo.setEnabled(true);

                jtxId_Pagamento.setEditable(true);
                jtxValor.setEditable(false);
                jcbFuncionario.setEnabled(false);

            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir pagamento!", "Erro no Banco", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Código do pagamento inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jcbFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbFuncionarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbFuncionarioActionPerformed

    private void jcbFuncionarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jcbFuncionarioPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbFuncionarioPropertyChange

    
    private FuncionarioInterface funcionarioController;
    private PagamentoInterface pagamentoController;
    
    //inicializa conexão rmi com o servidor
    private void inicializa() {
        try {
            //localiza  o registro rmi no host e porta definidos
            Registry registry = LocateRegistry.getRegistry("localhost", 1100);

            //recebe as referências remotas dos objetos registrados
            pagamentoController = (PagamentoInterface) registry.lookup("pagamento");
            funcionarioController = (FuncionarioInterface) registry.lookup("funcionario");

            System.out.println(" Conectado ao servidor RMI!");
        } catch (Exception e) {
            pagamentoController = null;
            funcionarioController = null;
            e.printStackTrace();
            System.out.println("Falha ao conectar ao servidor RMI!");
        }
    }

    //preenche a tabela de pagamentos
    private void preencherTabela() {
        try {
            //lista de funcionários para mapear ID e nome
            ArrayList<FuncionarioModel> listaFuncionarios = funcionarioController.listar();

            //lista de pagamentos registrados
            ArrayList<PagamentoModel> listaPagamentos = pagamentoController.listarTodosPagamentos();

            DefaultTableModel modeloTabela = (DefaultTableModel) jTable.getModel();
            modeloTabela.setRowCount(0);

            for (PagamentoModel p : listaPagamentos) {
                String nomeFuncionario = "";

                //busca o nome do funcionário correspondente ao id_cliente
                for (FuncionarioModel f : listaFuncionarios) {
                    if (f.getId_funcionario() == p.getId_cliente()) {
                        nomeFuncionario = f.getNome();
                        break;
                    }
                }

                //adiciona a linha com os dados
                modeloTabela.addRow(new Object[] {
                    p.getId_pagamento(),
                    nomeFuncionario,
                    p.getValor_liquido()
                });
            }

            if (listaPagamentos.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nenhum pagamento registrado!", "Retorno Tela", JOptionPane.WARNING_MESSAGE);
            }

        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        }
    }

    //limpa todos os campos do formulário
    private void limparCampos() {
        jtxId_Pagamento.setText("");
        jtxValor.setText("");
        jcbFuncionario.setSelectedIndex(-1);

        jtxId_Pagamento.setEditable(true);
        jtxValor.setEditable(true);
        jcbFuncionario.setEnabled(true);
    }

    //preenche combobox com a lista de funcionários cadastrados
    private void preencherComboBox() {
        try {
            //recebe a lista de funcionários via rmi
            ArrayList<FuncionarioModel> listaFuncionarios = funcionarioController.listar();

            DefaultComboBoxModel<FuncionarioModel> modelo = new DefaultComboBoxModel<>();
            for (FuncionarioModel f : listaFuncionarios) {
                modelo.addElement(f);
            }

            jcbFuncionario.setModel(modelo);

        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao preencher combobox de funcionários!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbFechar;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JComboBox<model.FuncionarioModel> jcbFuncionario;
    private javax.swing.JTextField jtxId_Pagamento;
    private javax.swing.JTextField jtxValor;
    // End of variables declaration//GEN-END:variables
}
