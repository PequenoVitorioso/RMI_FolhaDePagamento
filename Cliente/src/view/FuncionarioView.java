/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

/**
 *
 * @author Yasmim Mendes
 */

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.RemoteException;
import javax.swing.JOptionPane;
import model.DepartamentoModel;
import controller.*;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import model.CargoModel;
import model.FuncionarioModel;

public class FuncionarioView extends javax.swing.JFrame {

    /**
     * Creates new form FuncionarioView
     */
    public FuncionarioView() {
        initComponents();
        inicializa();
        preencherComboBox();
        preencherTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtxNome = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jbSalvar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbFechar = new javax.swing.JButton();
        jbPesquisar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jtxId_Funcionario = new javax.swing.JTextField();
        jbNovo = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jcbCargo = new javax.swing.JComboBox<>();
        jcbDepartamento = new javax.swing.JComboBox<>();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setVisible(true);

        jLabel1.setText("FUNCIONÁRIO");

        jLabel2.setText("Nome:");

        jtxNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxNomeActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Departamento", "Cargo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable);

        jbSalvar.setText("Salvar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbEditar.setText("Editar");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbFechar.setText("Fechar");
        jbFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFecharActionPerformed(evt);
            }
        });

        jbPesquisar.setText("Pesquisar");
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });

        jLabel5.setText("Código:");

        jtxId_Funcionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxId_FuncionarioActionPerformed(evt);
            }
        });

        jbNovo.setText("Novo");
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });

        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jLabel3.setText("Departamento:");

        jLabel6.setText("Cargo:");

        jcbCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbCargoActionPerformed(evt);
            }
        });

        jcbDepartamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDepartamentoActionPerformed(evt);
            }
        });
        jcbDepartamento.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jcbDepartamentoPropertyChange(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(jbNovo)
                        .addGap(18, 18, 18)
                        .addComponent(jbSalvar)
                        .addGap(18, 18, 18)
                        .addComponent(jbEditar)
                        .addGap(18, 18, 18)
                        .addComponent(jbExcluir)
                        .addGap(18, 18, 18)
                        .addComponent(jbFechar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbCargo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(5, 5, 5)
                                .addComponent(jcbDepartamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtxId_Funcionario, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtxNome, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jbPesquisar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(jLabel1))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jtxId_Funcionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbPesquisar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jtxNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jcbDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jcbCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbFechar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jbEditar)
                                .addComponent(jbSalvar)
                                .addComponent(jbNovo)
                                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtxNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxNomeActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        String nome = jtxNome.getText();
        DepartamentoModel departamentoSelecionado = (DepartamentoModel) jcbDepartamento.getSelectedItem();
        CargoModel cargoSelecionado = (CargoModel) jcbCargo.getSelectedItem();

        //verifica se todos os campos obrigatórios foram preenchidos
        if (nome.isEmpty() || departamentoSelecionado == null || cargoSelecionado == null) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            //cria o objeto funcionário
            FuncionarioModel funcionario = new FuncionarioModel();
            funcionario.setNome(nome);
            funcionario.setId_departamento(departamentoSelecionado.getId_departamento());
            funcionario.setId_cargo(cargoSelecionado.getId_cargo());

            //envia o funcionário para o servidor via rmi
            if (funcionarioController.inserir(funcionario)) {
                JOptionPane.showMessageDialog(this, "Funcionário inserido com sucesso!");

                //reabilita os botões da tela
                jbPesquisar.setEnabled(true);
                jbNovo.setEnabled(true);
                jbSalvar.setEnabled(true);
                jbEditar.setEnabled(true);
                jbExcluir.setEnabled(true);
                jbFechar.setEnabled(true);

                //limpa campos e atualiza a tabela
                limparCampos();
                preencherTabela();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao inserir o funcionário!", "Erro no Banco", JOptionPane.ERROR_MESSAGE);
            }

        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        //verifica se tem um funcionário selecionado
        if (jtxId_Funcionario.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecione ou pesquise um funcionário primeiro!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int idFuncionario = Integer.parseInt(jtxId_Funcionario.getText());
            String nome = jtxNome.getText();
            DepartamentoModel departamentoSelecionado = (DepartamentoModel) jcbDepartamento.getSelectedItem();
            CargoModel cargoSelecionado = (CargoModel) jcbCargo.getSelectedItem();

            //valida de campos obrigatórios
            if (nome.isEmpty() || departamentoSelecionado == null || cargoSelecionado == null) {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //cria objeto com os novos dados do funcionário
            FuncionarioModel funcionario = new FuncionarioModel();
            funcionario.setId_funcionario(idFuncionario);
            funcionario.setNome(nome);
            funcionario.setId_departamento(departamentoSelecionado.getId_departamento());
            funcionario.setId_cargo(cargoSelecionado.getId_cargo());

            //atualizar via rmi
            if (funcionarioController.editar(funcionario)) {
                JOptionPane.showMessageDialog(this, "Funcionário atualizado com sucesso!");
                limparCampos();
                preencherTabela();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar funcionário!", "Erro no Banco", JOptionPane.ERROR_MESSAGE);
            }

        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID do funcionário inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFecharActionPerformed
        dispose();
    }//GEN-LAST:event_jbFecharActionPerformed

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        //verifica se o campo de ID está preenchido
        if (jtxId_Funcionario.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha o código do funcionário!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            //converte o valor do campo de texto para inteiro
            int idFuncionario = Integer.parseInt(jtxId_Funcionario.getText());

            //cria um objeto apenas com o ID (usado para buscar no servidor)
            FuncionarioModel funcionarioBusca = new FuncionarioModel();
            funcionarioBusca.setId_funcionario(idFuncionario);

            //chamada remota via rmi pra buscar o funcionário no servidor
            FuncionarioModel funcionario = funcionarioController.selecionar(funcionarioBusca);

            if (funcionario != null) {
                //preenche campos se encontrar
                jtxNome.setText(funcionario.getNome());

                //seleciona o departamento no combobox
                for (int i = 0; i < jcbDepartamento.getItemCount(); i++) {
                    DepartamentoModel dep = jcbDepartamento.getItemAt(i);
                    if (dep.getId_departamento() == funcionario.getId_departamento()) {
                        jcbDepartamento.setSelectedIndex(i);
                        break;
                    }
                }

                //seleciona o cargo correspondente no combo
                for (int i = 0; i < jcbCargo.getItemCount(); i++) {
                    CargoModel c = jcbCargo.getItemAt(i);
                    if (c.getId_cargo() == funcionario.getId_cargo()) {
                        jcbCargo.setSelectedIndex(i);
                        break;
                    }
                }

                //ajusta o estado dos botões e campos
                jbSalvar.setEnabled(false);
                jbEditar.setEnabled(true);
                jbExcluir.setEnabled(true);

                jtxId_Funcionario.setEditable(false);
                jtxNome.setEditable(true);
                jcbDepartamento.setEnabled(true);
                jcbCargo.setEnabled(true);

            } else {
                JOptionPane.showMessageDialog(this, "Funcionário não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Código inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jtxId_FuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxId_FuncionarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxId_FuncionarioActionPerformed

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        //desabilita botões que não deve ser usados durante as inserções
        jbPesquisar.setEnabled(false);
        jbNovo.setEnabled(false);
        jbEditar.setEnabled(false);
        jbExcluir.setEnabled(false);
        jbSalvar.setEnabled(true);

        //ajusta campos para edição
        jtxId_Funcionario.setEditable(false);
        jtxNome.setEditable(true);
        jcbDepartamento.setEnabled(true);
        jcbCargo.setEnabled(true);

        //limpa campos e combobox
        jtxId_Funcionario.setText("");
        jtxNome.setText("");
        jcbDepartamento.setSelectedIndex(-1);
        jcbCargo.setSelectedIndex(-1);

        //coloca foco no campo nome
        jtxNome.requestFocus();
    }//GEN-LAST:event_jbNovoActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        //verifica se o campo de ID está preenchido
        if (jtxId_Funcionario.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Digite o código do funcionário!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            //converte o valor do campo de texto em número inteiro
            int idFuncionario = Integer.parseInt(jtxId_Funcionario.getText());

            //exibe uma janela para confirmar a exclusão
            int confirm = JOptionPane.showConfirmDialog(
                this,
                "Deseja realmente excluir este funcionário?",
                "Confirmar Exclusão",
                JOptionPane.YES_NO_OPTION
            );

            //caso o usuário clique em não, cancela a operação
            if (confirm != JOptionPane.YES_OPTION) {
                return;
            }

            //cria um objeto funcionário apenas com o ID a ser excluído
            FuncionarioModel funcionario = new FuncionarioModel();
            funcionario.setId_funcionario(idFuncionario);

            //solicita ao servidor que exclua o funcionário via rmi
            if (funcionarioController.excluir(funcionario)) {
                JOptionPane.showMessageDialog(this, "Funcionário excluído com sucesso!");
                limparCampos();
                preencherTabela();

                //atualizar estado dos botões e campos
                jbSalvar.setEnabled(true);
                jbEditar.setEnabled(false);
                jbExcluir.setEnabled(false);
                jbPesquisar.setEnabled(true);
                jbNovo.setEnabled(true);

                jtxId_Funcionario.setEditable(true);
                jtxNome.setEditable(false);
                jcbDepartamento.setEnabled(false);
                jcbCargo.setEnabled(false);

            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir funcionário!", "Erro no Banco", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Código do funcionário inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jcbCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCargoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbCargoActionPerformed

    private void jcbDepartamentoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jcbDepartamentoPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbDepartamentoPropertyChange

    private void jcbDepartamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDepartamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbDepartamentoActionPerformed

    private FuncionarioInterface funcionarioController;
    private DepartamentoInterface departamentoController;
    private CargoInterface cargoController;

    //conexão RMI
    private void inicializa() {
        try {
            //recebe o registro do servidor rmi no IP e na porta
            Registry registry = LocateRegistry.getRegistry("10.247.226.16", 1100);

            // Faz a busca das interfaces remotas registradas no servidor
            funcionarioController = (FuncionarioInterface) registry.lookup("funcionario");
            departamentoController = (DepartamentoInterface) registry.lookup("departamento");
            cargoController = (CargoInterface) registry.lookup("cargo");

            System.out.println("Conectado ao servidor RMI!");
        } catch (Exception e) {
            //caso ocorra erro de conexão, zera as referências
            funcionarioController = null;
            departamentoController = null;
            cargoController = null;
            e.printStackTrace();
            System.out.println("Falha ao conectar ao servidor RMI!");
        }
    }
    
    private void preencherTabela() {
    try {
        //busca todos os funcionários do servidor rmi
        ArrayList<FuncionarioModel> lista = funcionarioController.listar();

        //recebe o modelo da tabela e limpa as linhas antigas
        DefaultTableModel modeloTabela = (DefaultTableModel) jTable.getModel();
        modeloTabela.setRowCount(0);

        //percorre a lista de funcionários recebida do servidor
        for (FuncionarioModel f : lista) {
            String deptoTexto = "";
            String cargoTexto = "";

            //procura departamento correspondente ao ID do funcionário
            for (int i = 0; i < jcbDepartamento.getItemCount(); i++) {
                DepartamentoModel dep = jcbDepartamento.getItemAt(i);
                if (dep.getId_departamento() == f.getId_departamento()) {
                    deptoTexto = dep.getNome();
                    break;
                }
            }

            //procura cargo correspondente ao ID do funcionário
            for (int i = 0; i < jcbCargo.getItemCount(); i++) {
                CargoModel c = jcbCargo.getItemAt(i);
                if (c.getId_cargo() == f.getId_cargo()) {
                    cargoTexto = c.getNome();
                    break;
                }
            }

            //adiciona a linha na tabela com os dados do funcionário
            modeloTabela.addRow(new Object[] {
                f.getId_funcionario(),
                f.getNome(),
                deptoTexto,
                cargoTexto
            });
        }

        //exibe mensagem se não houver funcionários cadastrados
        if (lista.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum funcionário cadastrado!", "Retorno Tela", JOptionPane.WARNING_MESSAGE);
        }

    } catch (RemoteException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro de comunicação com o servidor RMI!", "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
    }
}

    
    private void limparCampos() {
        jtxId_Funcionario.setText("");
        jtxNome.setText("");
        jcbDepartamento.setSelectedIndex(-1);
        jcbCargo.setSelectedIndex(-1);

        jtxId_Funcionario.setEditable(true);
        jtxNome.setEditable(false);
        jcbDepartamento.setEnabled(false);
        jcbCargo.setEnabled(false);
    }
    
    private void preencherComboBox() {
        try {
            //busca lista de departamentos do servidor rmi
            ArrayList<DepartamentoModel> listaDepartamentos = departamentoController.listar();

            //cria o modelo do combobox e adiciona cada departamento
            DefaultComboBoxModel<DepartamentoModel> modeloDepto = new DefaultComboBoxModel<>();
            for (DepartamentoModel d : listaDepartamentos) {
                modeloDepto.addElement(d);
            }
            jcbDepartamento.setModel(modeloDepto);

            //busca lista de cargos do servidor RMI
            ArrayList<CargoModel> listaCargos = cargoController.listar();
            DefaultComboBoxModel<CargoModel> modeloCargo = new DefaultComboBoxModel<>();
            for (CargoModel c : listaCargos) {
                modeloCargo.addElement(c);
            }
            jcbCargo.setModel(modeloCargo);

        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao preencher comboboxes!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbFechar;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JComboBox<model.CargoModel> jcbCargo;
    private javax.swing.JComboBox<model.DepartamentoModel> jcbDepartamento;
    private javax.swing.JTextField jtxId_Funcionario;
    private javax.swing.JTextField jtxNome;
    // End of variables declaration//GEN-END:variables
}
